{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Footer/index.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","onClick","playGame","id","Wrapper","children","Title","Footer","score","highScore","resetGame","feedback","shuffleCards","array","newArr","slice","i","length","j","Math","floor","random","App","state","friends","shuffledFriends","selectedCards","active","indexOf","tempArray","push","setState","componentDidMount","this","map","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"ukEAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,SAASP,EAAMQ,U,MCAvEC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCK1BC,MANf,SAAeX,GACb,OACA,wBAAIC,UAAU,SAASD,EAAMU,W,MCOhBE,MATf,SAAgBZ,GACd,OACE,6BACE,wCAAcA,EAAMa,MAApB,kBAA0Cb,EAAMc,WAChD,yBAAKR,QAAS,kBAAMN,EAAMe,cAAcf,EAAMgB,Y,OCCpD,SAASC,EAAaC,GAEpB,IADA,IAAIC,EAASD,EAAME,MAAM,GAChBC,EAAIF,EAAOG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEjB,CAACF,EAAOI,GAAIJ,EAAOE,IAA3CF,EAAOE,GAFkC,KAE9BF,EAAOI,GAFuB,KAI5C,OAAOJ,E,IAwFMQ,E,2MApFbC,MAAQ,CACNC,UACAC,gBAAiB,GACjBjB,MAAO,EACPC,UAAW,EACXiB,cAAe,GACff,SAAU,GACVgB,QAAQ,G,EAGVzB,SAAW,SAACC,GAEV,GAAK,EAAKoB,MAAMI,OAIX,IAA8C,IAA1C,EAAKJ,MAAMG,cAAcE,QAAQzB,GAAY,CACpD,IAAI0B,EAAY,EAAKN,MAAMG,cAC3BG,EAAUC,KAAK3B,GACf,EAAK4B,SAAS,CACZN,gBAAiBb,EAAa,EAAKW,MAAMC,SACzCE,cAAeG,EACflB,SAAU,cACVH,MAAO,EAAKe,MAAMf,MAAQ,IAEH,KAArB,EAAKe,MAAMf,OACb,EAAKuB,SAAS,CACZpB,SAAU,+CAMd,EAAKoB,SAAS,CACZpB,SAAU,yEACVgB,QAAQ,SAtBV,EAAKjB,WAAU,I,EA2BnBA,UAAY,SAACa,IACP,EAAKA,MAAMZ,SAASiB,QAAQ,UAAY,GAAK,EAAKL,MAAMZ,SAASiB,QAAQ,WAAa,IAAML,IAC9F,EAAKQ,SAAS,CACZtB,UAAW,EAAKc,MAAMf,MACtBA,MAAO,EACPkB,cAAe,GACff,SAAU,GACVc,gBAAiBb,EAAa,EAAKW,MAAMC,SACzCG,QAAQ,K,EAMdK,kBAAoB,WAClB,EAAKD,SAAS,CACZN,gBAAiBb,EAAa,EAAKW,MAAMC,Y,wEAInC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBADF,IAEIS,KAAKV,MAAME,gBAAgBS,KAAI,SAAAC,GAAM,OACnC,kBAAC,EAAD,CACEjC,SAAU,EAAKA,SACfC,GAAIgC,EAAOhC,GACXiC,IAAKD,EAAOhC,GACZH,MAAOmC,EAAOnC,WAIpB,kBAAC,EAAD,CACEW,SAAUsB,KAAKV,MAAMZ,SACrBH,MAAOyB,KAAKV,MAAMf,MAClBC,UAAWwB,KAAKV,MAAMd,UACtBC,UAAWuB,KAAKvB,iB,GA9ER2B,a,MCZlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.08f8de86.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n          <img alt={props.name} src={props.image} onClick={() => props.playGame(props.id)}/>\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n  <h1 className=\"title\">{props.children}</h1>\n  )\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return (\n    <div>\n      <span>Score: {props.score} | High Score: {props.highScore}</span>\n      <div onClick={() => props.resetGame()}>{props.feedback}</div>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Footer from \"./components/Footer\";\nimport friends from \"./friends.json\";\n\n//\"Friend\" shuffle function\nfunction shuffleCards(array) {\n  let newArr = array.slice(0); //Create new temp Array from state.friends.\n  for (let i = newArr.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\nclass App extends Component {\n  state = {\n    friends,\n    shuffledFriends: [],\n    score: 0,\n    highScore: 0,\n    selectedCards: [],\n    feedback: \"\",\n    active: true\n  };\n\n  playGame = (id) => {\n    // Check if game state is not active.  If not, reset game.\n    if (!this.state.active) {\n      this.resetGame(false);\n    }\n    // Game is active, selected card is not in selectedCards list.\n    else if (this.state.selectedCards.indexOf(id) === -1) {\n      let tempArray = this.state.selectedCards;\n      tempArray.push(id);\n      this.setState({\n        shuffledFriends: shuffleCards(this.state.friends),\n        selectedCards: tempArray,\n        feedback: \"Keep going!\",\n        score: this.state.score + 1\n      })\n      if (this.state.score === 12) {\n        this.setState({\n          feedback: \"You've won! Click here to play again!\"\n        })\n      }\n    } \n    // Card has already been selected.  Show feedback, and set game to false to prevent additional plays on the current game.\n    else {\n      this.setState({\n        feedback: \"Sorry, that card has already been selected.  Click here to play again!\",\n        active: false\n      })\n    }\n  }\n\n  resetGame = (state) => {\n    if (this.state.feedback.indexOf(\"Sorry\") > -1 || this.state.feedback.indexOf(\"You've\") > -1 || !state) {\n      this.setState({\n        highScore: this.state.score,\n        score: 0,\n        selectedCards: [],\n        feedback: \"\",\n        shuffledFriends: shuffleCards(this.state.friends),\n        active: true\n      })\n    }\n  }\n\n  //On load, shuffle the cards.\n  componentDidMount = () => {\n    this.setState({\n      shuffledFriends: shuffleCards(this.state.friends)\n    })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title> clickyGame </Title> {\n          this.state.shuffledFriends.map(friend => (\n            <FriendCard\n              playGame={this.playGame}\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n            />\n          ))\n        }\n        <Footer\n          feedback={this.state.feedback}\n          score={this.state.score}\n          highScore={this.state.highScore}\n          resetGame={this.resetGame}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}